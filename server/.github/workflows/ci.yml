name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
        mongodb-version: ['5.0', '6.0']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: server/package-lock.json

    - name: Start MongoDB ${{ matrix.mongodb-version }}
      uses: supercharge/mongodb-github-action@1.10.0
      with:
        mongodb-version: ${{ matrix.mongodb-version }}
        mongodb-replica-set: test-rs

    - name: Install dependencies
      working-directory: ./server
      run: npm ci

    - name: Run ESLint
      working-directory: ./server
      run: npm run lint

    - name: Run tests with coverage
      working-directory: ./server
      run: npm test -- --coverage --watchAll=false
      env:
        NODE_ENV: test
        MONGO_URI_TEST: mongodb://localhost:27017/ai-persona-writer-test
        JWT_SECRET: test-jwt-secret-key-for-ci

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./server/coverage/lcov.info
        flags: backend

  security:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run security audit
      working-directory: ./server
      run: npm audit --audit-level=high

    - name: Run dependency check
      working-directory: ./server
      run: npx audit-ci --config .audit-ci.json

  build:
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./server
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/ai-persona-writer-backend:latest
          ${{ secrets.DOCKER_USERNAME }}/ai-persona-writer-backend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
    - name: Deploy to staging
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.STAGING_HOST }}
        username: ${{ secrets.STAGING_USER }}
        key: ${{ secrets.STAGING_SSH_KEY }}
        script: |
          cd /app/ai-persona-writer-backend
          docker pull ${{ secrets.DOCKER_USERNAME }}/ai-persona-writer-backend:${{ github.sha }}
          docker stop ai-persona-writer-staging || true
          docker rm ai-persona-writer-staging || true
          docker run -d --name ai-persona-writer-staging \
            --network app-network \
            -e NODE_ENV=staging \
            -e MONGO_URI="${{ secrets.STAGING_MONGO_URI }}" \
            -e JWT_SECRET="${{ secrets.STAGING_JWT_SECRET }}" \
            -e CLIENT_URL="${{ secrets.STAGING_CLIENT_URL }}" \
            -p 5000:5000 \
            ${{ secrets.DOCKER_USERNAME }}/ai-persona-writer-backend:${{ github.sha }}

  deploy-production:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
    - name: Deploy to production
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USER }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        script: |
          cd /app/ai-persona-writer-backend
          
          # Pull new image
          docker pull ${{ secrets.DOCKER_USERNAME }}/ai-persona-writer-backend:${{ github.sha }}
          
          # Blue-green deployment
          if docker ps | grep -q ai-persona-writer-blue; then
            NEW_COLOR=green
            OLD_COLOR=blue
            NEW_PORT=5001
            OLD_PORT=5000
          else
            NEW_COLOR=blue
            OLD_COLOR=green  
            NEW_PORT=5000
            OLD_PORT=5001
          fi
          
          # Start new container
          docker run -d --name ai-persona-writer-$NEW_COLOR \
            --network app-network \
            -e NODE_ENV=production \
            -e MONGO_URI="${{ secrets.PRODUCTION_MONGO_URI }}" \
            -e JWT_SECRET="${{ secrets.PRODUCTION_JWT_SECRET }}" \
            -e CLIENT_URL="${{ secrets.PRODUCTION_CLIENT_URL }}" \
            -e REDIS_URL="${{ secrets.PRODUCTION_REDIS_URL }}" \
            -e INFER_MODE=rule \
            -p $NEW_PORT:5000 \
            ${{ secrets.DOCKER_USERNAME }}/ai-persona-writer-backend:${{ github.sha }}
          
          # Wait for health check
          sleep 30
          
          # Update nginx upstream
          if curl -f http://localhost:$NEW_PORT/health; then
            # Update load balancer configuration
            sed -i "s/:$OLD_PORT/:$NEW_PORT/g" /etc/nginx/conf.d/ai-persona-writer.conf
            nginx -s reload
            
            # Stop old container
            sleep 10
            docker stop ai-persona-writer-$OLD_COLOR || true
            docker rm ai-persona-writer-$OLD_COLOR || true
            
            echo "Deployment successful: ai-persona-writer-$NEW_COLOR"
          else
            echo "Health check failed, rolling back"
            docker stop ai-persona-writer-$NEW_COLOR
            docker rm ai-persona-writer-$NEW_COLOR
            exit 1
          fi

  notify:
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()

    steps:
    - name: Notify Slack
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}